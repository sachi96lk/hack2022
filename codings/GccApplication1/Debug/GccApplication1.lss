
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000252  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000252  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000252  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000284  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000002c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000969  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006fb  00000000  00000000  00000c99  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000456  00000000  00000000  00001394  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  000017ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f7  00000000  00000000  00001898  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000020b  00000000  00000000  00001c8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001e9a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__vector_13>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  74:	0c 94 ed 00 	jmp	0x1da	; 0x1da <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <USART_Init>:
}

void USART_TxNumber(int32_t number,uint8_t dtype){
	
	itoa(number,num,dtype);
	USART_TxString(num);
  7c:	9c 01       	movw	r18, r24
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	50 e0       	ldi	r21, 0x00	; 0
  82:	60 e2       	ldi	r22, 0x20	; 32
  84:	71 ea       	ldi	r23, 0xA1	; 161
  86:	87 e0       	ldi	r24, 0x07	; 7
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	0e 94 9f 00 	call	0x13e	; 0x13e <__divmodsi4>
  8e:	21 50       	subi	r18, 0x01	; 1
  90:	31 09       	sbc	r19, r1
  92:	30 bd       	out	0x20, r19	; 32
  94:	29 b9       	out	0x09, r18	; 9
  96:	88 e9       	ldi	r24, 0x98	; 152
  98:	8a b9       	out	0x0a, r24	; 10
  9a:	8e e8       	ldi	r24, 0x8E	; 142
  9c:	80 bd       	out	0x20, r24	; 32
  9e:	78 94       	sei
  a0:	08 95       	ret

000000a2 <__vector_13>:
	
}



ISR(USART_RXC_vect){//A,B,C,D ???
  a2:	1f 92       	push	r1
  a4:	0f 92       	push	r0
  a6:	0f b6       	in	r0, 0x3f	; 63
  a8:	0f 92       	push	r0
  aa:	11 24       	eor	r1, r1
  ac:	8f 93       	push	r24
	
 rchar=UDR;
  ae:	8c b1       	in	r24, 0x0c	; 12
  b0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <rchar>
	

	
		
}
  b4:	8f 91       	pop	r24
  b6:	0f 90       	pop	r0
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	0f 90       	pop	r0
  bc:	1f 90       	pop	r1
  be:	18 95       	reti

000000c0 <main>:

uint8_t pos=0;

int main(void)
{
    DDRD|=(0b111<<3);
  c0:	81 b3       	in	r24, 0x11	; 17
  c2:	88 63       	ori	r24, 0x38	; 56
  c4:	81 bb       	out	0x11, r24	; 17
	USART_Init(2400);
  c6:	80 e6       	ldi	r24, 0x60	; 96
  c8:	99 e0       	ldi	r25, 0x09	; 9
  ca:	0e 94 3e 00 	call	0x7c	; 0x7c <USART_Init>
    while (1) 
    {
		if ((rchar>62)&&(rchar<68))
  ce:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <rchar>
  d2:	91 ec       	ldi	r25, 0xC1	; 193
  d4:	98 0f       	add	r25, r24
  d6:	95 30       	cpi	r25, 0x05	; 5
  d8:	40 f5       	brcc	.+80     	; 0x12a <main+0x6a>
		{
			PORTD=(PORTD&0b11000111)|(1<<(rchar-62));
  da:	42 b3       	in	r20, 0x12	; 18
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	ce 97       	sbiw	r24, 0x3e	; 62
  e0:	21 e0       	ldi	r18, 0x01	; 1
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	b9 01       	movw	r22, r18
  e6:	02 c0       	rjmp	.+4      	; 0xec <main+0x2c>
  e8:	66 0f       	add	r22, r22
  ea:	77 1f       	adc	r23, r23
  ec:	8a 95       	dec	r24
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <main+0x28>
  f0:	cb 01       	movw	r24, r22
  f2:	94 2f       	mov	r25, r20
  f4:	97 7c       	andi	r25, 0xC7	; 199
  f6:	89 2b       	or	r24, r25
  f8:	82 bb       	out	0x12, r24	; 18
			eeprom_write_byte((uint8_t*)pos,rchar-65);
  fa:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <rchar>
  fe:	61 54       	subi	r22, 0x41	; 65
 100:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <eeprom_write_byte>
			pos++;
 10a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 10e:	8f 5f       	subi	r24, 0xFF	; 255
 110:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			rchar=0;
 114:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <rchar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 118:	7f ef       	ldi	r23, 0xFF	; 255
 11a:	89 e6       	ldi	r24, 0x69	; 105
 11c:	98 e1       	ldi	r25, 0x18	; 24
 11e:	71 50       	subi	r23, 0x01	; 1
 120:	80 40       	sbci	r24, 0x00	; 0
 122:	90 40       	sbci	r25, 0x00	; 0
 124:	e1 f7       	brne	.-8      	; 0x11e <main+0x5e>
 126:	00 c0       	rjmp	.+0      	; 0x128 <main+0x68>
 128:	00 00       	nop
 12a:	2f ef       	ldi	r18, 0xFF	; 255
 12c:	69 e6       	ldi	r22, 0x69	; 105
 12e:	78 e1       	ldi	r23, 0x18	; 24
 130:	21 50       	subi	r18, 0x01	; 1
 132:	60 40       	sbci	r22, 0x00	; 0
 134:	70 40       	sbci	r23, 0x00	; 0
 136:	e1 f7       	brne	.-8      	; 0x130 <main+0x70>
 138:	00 c0       	rjmp	.+0      	; 0x13a <main+0x7a>
 13a:	00 00       	nop
 13c:	c8 cf       	rjmp	.-112    	; 0xce <main+0xe>

0000013e <__divmodsi4>:
 13e:	05 2e       	mov	r0, r21
 140:	97 fb       	bst	r25, 7
 142:	1e f4       	brtc	.+6      	; 0x14a <__divmodsi4+0xc>
 144:	00 94       	com	r0
 146:	0e 94 b6 00 	call	0x16c	; 0x16c <__negsi2>
 14a:	57 fd       	sbrc	r21, 7
 14c:	07 d0       	rcall	.+14     	; 0x15c <__divmodsi4_neg2>
 14e:	0e 94 be 00 	call	0x17c	; 0x17c <__udivmodsi4>
 152:	07 fc       	sbrc	r0, 7
 154:	03 d0       	rcall	.+6      	; 0x15c <__divmodsi4_neg2>
 156:	4e f4       	brtc	.+18     	; 0x16a <__divmodsi4_exit>
 158:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__negsi2>

0000015c <__divmodsi4_neg2>:
 15c:	50 95       	com	r21
 15e:	40 95       	com	r20
 160:	30 95       	com	r19
 162:	21 95       	neg	r18
 164:	3f 4f       	sbci	r19, 0xFF	; 255
 166:	4f 4f       	sbci	r20, 0xFF	; 255
 168:	5f 4f       	sbci	r21, 0xFF	; 255

0000016a <__divmodsi4_exit>:
 16a:	08 95       	ret

0000016c <__negsi2>:
 16c:	90 95       	com	r25
 16e:	80 95       	com	r24
 170:	70 95       	com	r23
 172:	61 95       	neg	r22
 174:	7f 4f       	sbci	r23, 0xFF	; 255
 176:	8f 4f       	sbci	r24, 0xFF	; 255
 178:	9f 4f       	sbci	r25, 0xFF	; 255
 17a:	08 95       	ret

0000017c <__udivmodsi4>:
 17c:	a1 e2       	ldi	r26, 0x21	; 33
 17e:	1a 2e       	mov	r1, r26
 180:	aa 1b       	sub	r26, r26
 182:	bb 1b       	sub	r27, r27
 184:	fd 01       	movw	r30, r26
 186:	0d c0       	rjmp	.+26     	; 0x1a2 <__udivmodsi4_ep>

00000188 <__udivmodsi4_loop>:
 188:	aa 1f       	adc	r26, r26
 18a:	bb 1f       	adc	r27, r27
 18c:	ee 1f       	adc	r30, r30
 18e:	ff 1f       	adc	r31, r31
 190:	a2 17       	cp	r26, r18
 192:	b3 07       	cpc	r27, r19
 194:	e4 07       	cpc	r30, r20
 196:	f5 07       	cpc	r31, r21
 198:	20 f0       	brcs	.+8      	; 0x1a2 <__udivmodsi4_ep>
 19a:	a2 1b       	sub	r26, r18
 19c:	b3 0b       	sbc	r27, r19
 19e:	e4 0b       	sbc	r30, r20
 1a0:	f5 0b       	sbc	r31, r21

000001a2 <__udivmodsi4_ep>:
 1a2:	66 1f       	adc	r22, r22
 1a4:	77 1f       	adc	r23, r23
 1a6:	88 1f       	adc	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	1a 94       	dec	r1
 1ac:	69 f7       	brne	.-38     	; 0x188 <__udivmodsi4_loop>
 1ae:	60 95       	com	r22
 1b0:	70 95       	com	r23
 1b2:	80 95       	com	r24
 1b4:	90 95       	com	r25
 1b6:	9b 01       	movw	r18, r22
 1b8:	ac 01       	movw	r20, r24
 1ba:	bd 01       	movw	r22, r26
 1bc:	cf 01       	movw	r24, r30
 1be:	08 95       	ret

000001c0 <eeprom_write_byte>:
 1c0:	26 2f       	mov	r18, r22

000001c2 <eeprom_write_r18>:
 1c2:	e1 99       	sbic	0x1c, 1	; 28
 1c4:	fe cf       	rjmp	.-4      	; 0x1c2 <eeprom_write_r18>
 1c6:	9f bb       	out	0x1f, r25	; 31
 1c8:	8e bb       	out	0x1e, r24	; 30
 1ca:	2d bb       	out	0x1d, r18	; 29
 1cc:	0f b6       	in	r0, 0x3f	; 63
 1ce:	f8 94       	cli
 1d0:	e2 9a       	sbi	0x1c, 2	; 28
 1d2:	e1 9a       	sbi	0x1c, 1	; 28
 1d4:	0f be       	out	0x3f, r0	; 63
 1d6:	01 96       	adiw	r24, 0x01	; 1
 1d8:	08 95       	ret

000001da <_exit>:
 1da:	f8 94       	cli

000001dc <__stop_program>:
 1dc:	ff cf       	rjmp	.-2      	; 0x1dc <__stop_program>
